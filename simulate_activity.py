from users import UserManager, alias_generator, name_generator
from posts import PostManager
import random


def simulate_activity(user_manager, post_manager, num_users=20):
    """
    Genera usuarios iniciales y publicaciones, asegurando que cada usuario tenga un mensaje √∫nico.
    """
    predefined_posts = [
        "Having pizza with family tonight üòãüçï",
        "Excited about the weekend! üéâ",
        "Workout complete! Feeling strong üí™",
        "Dreaming of travel ‚úàÔ∏èüåç",
        "Coffee time ‚òï and coding üíª",
        "Nature walk this morning üå≤‚òÄÔ∏è",
        "Just finished a great book üìö",
        "Relaxing with a good movie üé¨üçø",
        "Weekend road trip plans üöóüó∫Ô∏è",
        "Happy to reconnect with old friends üòä",
        "Exploring a new city üèôÔ∏èüö∂‚Äç‚ôÇÔ∏è",
        "Gardening and loving the sunshine üåª‚òÄÔ∏è",
        "Learning new skills online üìñüíª",
        "Celebrating a special day üéÇü•≥",
        "Taking time to meditate and relax üßò‚Äç‚ôÇÔ∏èüåø",
        "Cooking something delicious üç≥üç≤",
        "Enjoying quality time with family üè†‚ù§Ô∏è",
        "Back to work after a refreshing weekend üíº‚òï",
        "Watching my favorite series üì∫üçø",
        "Planning a future adventure ‚úàÔ∏èüåè",
    ]

    # Validar que haya suficientes mensajes para el n√∫mero de usuarios
    if num_users > len(predefined_posts):
        raise ValueError("El n√∫mero de usuarios no puede exceder el n√∫mero de mensajes disponibles.")

    # Mezclar mensajes para asignarlos de forma aleatoria
    random.shuffle(predefined_posts)

    for i in range(num_users):
        # Generar alias y nombre aleatorios
        alias = alias_generator()
        last_name, name = name_generator()
        full_name = f"{name} {last_name}"

        # Registrar usuario
        user_manager.register_user(alias, full_name)

        # Asignar un mensaje √∫nico al usuario
        content = predefined_posts.pop()  # Extraer un mensaje √∫nico
        post_manager.add_post(alias, content)

        # Asignar un n√∫mero aleatorio de likes a la publicaci√≥n
        post = post_manager.list_posts()[-1]  # Obtener la √∫ltima publicaci√≥n
        num_likes = random.randint(0, 2000)

        # Agregar "Me gusta" simulados
        for _ in range(num_likes):
            liker_alias = alias_generator()  # Simular alias de los que dan "Me gusta"
            post.add_like(liker_alias)

        # Asignar un n√∫mero aleatorio de comentarios entre 0 y 30
        num_comments = random.randint(0, 30)
        for _ in range(num_comments):
            commenter_alias = alias_generator()  # Simular alias de los que comentan
            comment = f"Comentario de {commenter_alias}"  # Generar un comentario gen√©rico
            post.add_comment(commenter_alias, comment)

    print(f"{num_users} usuarios y publicaciones iniciales generados exitosamente.")


if __name__ == "__main__":
    # Crear instancias de UserManager y PostManager
    user_manager = UserManager()
    post_manager = PostManager()

    # Generar usuarios y publicaciones iniciales
    simulate_activity(user_manager, post_manager)

    # Imprimir usuarios registrados
    print("Usuarios registrados:")
    for user in user_manager.list_users():
        print(user)

    # Imprimir publicaciones iniciales
    print("\nPublicaciones iniciales:")
    for post in post_manager.list_posts():
        print(f"{post.author}: {post.content} | Likes: {len(post.likes)} | Comentarios: {len(post.comments)}")
